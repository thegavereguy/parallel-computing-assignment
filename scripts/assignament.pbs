#!/bin/bash
# Job name
#PBS -N pc_assignment
# Output files
#PBS -o ./assignment.o
#PBS -e ./assignment.e
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=0:40:00
# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=16:mem=1gb


# Modules for C++ compiler and CMake
module load gcc91
module load cmake-3.15.4
module load perf

g++() {
    g++-9.1.0 "$@"
}

if [ -z $PROJECT_DIR ]; then
		PROJECT_DIR="parallel-computing-assignment"
fi

# Select the working directory
cd $HOME/$PROJECT_DIR

# Create directory for the results and clear it
mkdir results
rm -rf results/*

mkdir results/benchmarks
# mkdir results/cache

# Print information about the cpu
lscpu > results/cpu_info.txt

# Creta a build directory if it does not exist
mkdir build
cd build

# Remove the previous build
make clean

# Compile the code
cmake ..
make -j8
cd ..

export BENCHMARK_CONFIDENCE_INTERVAL=0.30

# Set the number of samples for the benchmarks
export BENCH_SAMPLES=10

# Skip the cache benchmarks as they do not work on the cluster
export RUN_CACHE_BENCHMARKS=2

export OMP_NUM_THREADS=1
# Run the benchmarks and save the results
./scripts/run_benchmarks.sh

export OMP_NUM_THREADS=2
# Run the benchmarks and save the results
./scripts/run_benchmarks.sh

export OMP_NUM_THREADS=4
# Run the benchmarks and save the results
./scripts/run_benchmarks.sh

export OMP_NUM_THREADS=8
# Run the benchmarks and save the results
./scripts/run_benchmarks.sh

export OMP_NUM_THREADS=16
# Run the benchmarks and save the results
./scripts/run_benchmarks.sh
